// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  firstName String
  lastName  String
  email     String   @unique
  status    Status   @default(Active)
  password  String
  Token     Token[]
  Device    Device[]
  roles     Role[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Post {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Role {
  id         String       @id @default(auto()) @map("_id") @db.ObjectId
  User       User?        @relation(fields: [userId], references: [id])
  userId     String?      @db.ObjectId
  name       String
  permission Pesmission[]
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
}

model Pesmission {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  model     String
  action    Action
  role      Role?    @relation(fields: [roleId], references: [id])
  roleId    String?  @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Device {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userAgent String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String?  @db.ObjectId
  user      User?    @relation(fields: [userId], references: [id])
  Token     Token?
}

model Token {
  id        String      @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  user      User?       @relation(fields: [userId], references: [id])
  userId    String?     @db.ObjectId
  deviceId  String?     @unique @db.ObjectId
  device    Device?     @relation(fields: [deviceId], references: [id])
  token     String
  type      TokenType
  jti       String
  payload   Json
  status    TokenStatus
}

enum Action {
  Read
  Write
  Delete
  Update
}

enum Status {
  Active
  Inactive
}

enum TokenType {
  AccessToken
  RefeshToken
}

enum TokenStatus {
  Issued
  Expired
  Destroyed
}
